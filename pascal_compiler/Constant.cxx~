/*
** Implementation file for Constant class
**
** eXa/aNaLoG
**
*/

#include "General.hxx"
#include "Constant.hxx"

// Construct an integer constant
Constant::Constant(Integer c, int v)
: TypedSymbol( String('!') + String(Itoa(c)) , new IntegerType), 
  val(v), value(&val) {}

// Construct a typed constant
Constant::Constant(Integer c, Type *t, void* v)
: TypedSymbol( String('!') + String(Itoa(c)) , t)
{
  int length = type->storage();
  void *val = value = (void *) new char[length];
  for (int i=0; i<length; i++, val++, v++)
    *(char *)val = *(char *)v;
}

// Construct a typed constant
Constant::Constant(String n, Type *t, void* v)
{
  name = n;
  type = t;
  int length = type->storage();
  void *val = value = (void *) new char[length];
  for (int i=0; i<length; i++, val++, v++)
    *(char *)val = *(char *)v;
}


Constant::~Constant() {
  if (value!=&val) delete value;
}

String s;

// String representation of a constant
// note that this is only for humans' reading contents of quadruples
String& Constant::str() {
  void *val=value;
  s = "0x";
  for (int i = 0; i < type->storage(); i++, val++) {
    char c = *((char*)val) + '0';
    s += String(c);
  }
  return s;
}



