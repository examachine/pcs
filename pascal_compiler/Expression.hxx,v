head	1.2;
access;
symbols;
locks; strict;
comment	@// @;


1.2
date	97.06.03.06.43.18;	author exa;	state Exp;
branches;
next	1.1;

1.1
date	97.05.29.17.31.31;	author exa;	state Exp;
branches;
next	;


desc
@@


1.2
log
@something is real wrong about constuctors...
@
text
@/*
** Interface file for Expression class
**
** eXa/aNaLoG
**
*/

#ifndef Expression_h
#define Expression_h 1

#include "List.hxx"
#include "Variable.hxx"
#include "Constant.hxx"
#include "Gen.hxx"


// An Expression is a Typed Symbol capable of code generation
class Expression : virtual public TypedSymbol
{
protected:

  Expression() {}

  String get_name(Integer n) {
    return String('$') + String(Itoa(n));
  }

  String get_name(String s) {
    return String('$') + s;
  }

public:

  Gen gen;

  Expression(Integer n, Type *t)
    : TypedSymbol( get_name(n), t) {}

  virtual ~Expression() {}

};

typedef List<Expression*> ExprList; // we need a list of expressions
typedef ListTraversal<Expression*> ExprTrav;


class VariableExpression : public Expression, public Variable
{
public:

  VariableExpression(Integer n, Type *t, int o)
    : Variable(get_name(n), t, o) {}

  VariableExpression(Variable *v)
    : Variable(get_name(v->name), v->type, v->offset) {}
};


class ConstantExpression : public Expression, public Constant
{
public:

  ConstantExpression(Integer n, int v)
    : Constant(n, v) { }

  ConstantExpression(Integer n, double v)
    : Constant(n, v) { }

  ConstantExpression(Integer n, Type *t, void *v)
    : Constant(n, t, v) { }

  ConstantExpression(Integer n, Constant *c)
    : Expression(n, c->type) {value=c->value;}
};

#endif








@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** Interface file for
d11 1
d13 3
a15 1
#include "List.hxx"
d17 2
a18 2
// An Expression is a Variable which is capable of code generation
class Expression : public Variable
d20 12
d33 1
d35 6
a40 4
  Expression(int n, Type *t, int o)
    : Variable(String('$')+String(n), t, o) {}
  Expression(int n, Variable *v)
    : Expression(n, v->type, o) {} 
d45 30
@
