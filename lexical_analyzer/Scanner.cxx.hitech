/*
** Implementation file for Scannermodule
**
**
**
** exa
**
*/

#include "Scanner.hxx"

// constructor
Scanner::Scanner(char* source)
  : in(source), line_number(1), column_number(1)
  , source_filename(source), state(s_init), prev_state(s_dead)
  , lexemesize(0)
{
  for (int i=0; i<256; i++)
    lexeme[i]=0;
  read_next_char();
  //lexeme[0]=c;
}

int Scanner::print_next_token(ostream& out) {

  TokenInfo quad = scan();
  //out << quad.linenumber << ',' << quad.lineposition << endl;
  out << "TOKEN: " << lexeme << endl;
}

// The core routine used by the scanner
TokenInfo Scanner::scan() {

  try {
    if (state!=s_init) {
      read_next_char();
    }
  }
  catch (EOFException e) {
    return gen_quad(eof, *new Attribute);
  }

  //cout << state << ",<" << lexeme << "> " << endl;

  // State transitions
  switch (state) {

    // initial state
  case s_init: {

    switch (c) {

      // white space
    case '\n':
    case ' ':
    case '\t': transition(s_ws); scan_white_space(); break;

      // beginning of a comment
    case '{': transition(s_comment); scan_comment(); break;

      // prefix '<'
    case '<': transition(s_less); break;

      // prefix '>'
    case '>': transition(s_grt); break;

      // prefix ':'
    case ':': transition(s_col); break;

      // prefix ','
    case '.': transition(s_dot); break;

    default: {
      if (isalpha(c))
	transition(s_id);
      else if (isdigit(c))
	transition(s_num);
      else
	transition(s_init);
    } break;
    }
  }
  break;

  // scanning white space
  case s_ws: {
    switch (c) {
    case '\n':
    case ' ':
    case '\t': break;
    default: {
	transition(s_init);
    } break;
    }
  }
  break;

  // scanning identifiers and keywords
  case s_id: {
    if (!isalnum(c))
      transition(s_init);
  } break;
  break;

  // scanning numbers
  case s_num: {
    if ((c=='.'))
      transition(s_fract);
    else if ((c=='e'))
      transition(s_exp2);
    else if (!isdigit(c))
      transition(s_init);
  } break;
  break;

  // scanning fraction
  case s_fract: {
    if ((c=='e'))
      transition(s_exp);
    else if (!isdigit(c)) {
      transition(s_init);
      if (last_c=='.')
	error("Digit expected for fraction part of real literal");
    }
  } break;
  break;

  // scanning optional exponent
  case s_exp: {
    if (! ((isdigit(c)) || (c=='+') || (c=='-')) )
      error("Digit, + or - expected for exponent part of real literal");
    transition(s_exp2);
  } break;
  break;

  // scanning optional exponent's value
  case s_exp2: {
    if (!isdigit(c))
      if (!isdigit(last_c))
	error("Digit expected at the end of exponent part");
      else
	transition(s_init);
  } break;
  break;

  // scanning prefix '<'
  case s_less: {
    switch (c) {
    case '>': transition(s_ne); break;
    case '=': transition(s_le); break;
    default: transition(s_init); break;
    }
  }
  break;
  case s_ne: transition(s_init); break;
  case s_le: transition(s_init); break;

  // scanning prefix '>'
  case s_grt: {
    switch (c) {
    case '=': transition(s_ge); break;
    default: transition(s_init); break;
    }
  }
  break;
  case s_ge: transition(s_init); break;

  // scanning prefix '.'
  case s_dot: {
    switch (c) {
    case '.': transition(s_dotdot); break;
    default: transition(s_init); break;
    }
  }
  break;
  case s_dotdot: transition(s_init); break;

  // scanning prefix ':'
  case s_col: {
    switch (c) {
    case '=': transition(s_asg); break;
    default: transition(s_init); break;
    }
  }
  break;
  case s_asg: transition(s_init); break;

  } // end of switch(state)
  
  // append new character to the lexeme
  if (state!=s_init) {
    lexeme[lexemesize++] = c;
    if (lexemesize==256)
      error("Lexeme too long");
  }
  if (state==s_init) {

    // output token if recognized
    switch (prev_state) {
    case s_id: return handle_id();
    case s_num: return gen_quad(intnum, *new IntNum(lexeme));
    case s_fract:
    case s_exp2: return gen_quad(realnum, *new RealNum(lexeme));
    case s_eq: return gen_quad(relop, *new RelOp(RelOp::eq));
    case s_ne: return gen_quad(relop, *new RelOp(RelOp::ne));
    case s_le: return gen_quad(relop, *new RelOp(RelOp::le));
    case s_less: return gen_quad(relop, *new RelOp(RelOp::lt));
    case s_ge: return gen_quad(relop, *new RelOp(RelOp::ge));
    case s_grt: return gen_quad(relop, *new RelOp(RelOp::gt));
    case s_add: return gen_quad(addop, *new AddOp(AddOp::add));
    case s_sub: return gen_quad(addop, *new AddOp(AddOp::sub));
    case s_dot: return gen_quad(delimiter, *new Delimiter(Delimiter::dot));
    case s_dotdot: return gen_quad(delimiter, *new Delimiter(Delimiter::dotdot));
    case s_col: return gen_quad(delimiter, *new Delimiter(Delimiter::col));
    case s_asg: return gen_quad(assigop, *new AssigOp);
    case s_ws:
    case s_comment:
    case s_dead: break;
    default: error("No matching token"); break;// we have fetched no token!
    }

    for (int i=0; i<lexemesize; i++)		// starting new lexeme
      lexeme[i]=0;
    lexemesize = 0;
  }

  return scan();
}

// read next character from the input stream
void Scanner::read_next_char() {
  if (finished()) {
    cerr << "Already at the end of the input" << endl;
    throw EOFException();
  }

  // read next character from the input stream
  last_c = c;
  c = in.get();
  if (finished()) {
    // return 0
    throw EOFException();
  }

  // update current line and column number
  if (c=='\n') {
    line_number += 1;
    column_number = 1;
  }
  else
    if (c=='\t')
      column_number += 8;
    else
      column_number += 1;

  if (isalpha(c))
    c = tolower(c);

}

// perform state transition
void Scanner::transition(State ns) {
  prev_state = state;
  state = ns;
}

void Scanner::scan_white_space() {

}

// scan past comments
void Scanner::scan_comment()
{
  do {
    try {
      read_next_char();
    }
    catch (EOFException e) {
      error("comment delimiter '}' expected at the end of file");
    }
  } while (c!='}');
  transition(s_init);
  read_next_char();
}

// handle identifiers and reserved words through a reserved word table
TokenInfo Scanner::handle_id()
{
  return gen_quad(id, ID(string(lexeme)));
}

// Generate appropriate quadruple for the token t with attr value a
TokenInfo Scanner::gen_quad(Token t, Attribute& a)
{
  return TokenInfo(t,a,line_number,column_number);
}

// Give error message
void Scanner::error(const string& s) {
  cerr << source_filename << ":L" << line_number << ":C" << column_number
       << " Error: " << s << endl;
}

// Give warning message
void Scanner::warning(const string& s) {
  cerr << source_filename << ":L" << line_number << ":C" << column_number
       << " Warning: " << s << endl;
}

